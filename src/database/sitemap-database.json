{
    "": { "title": "Brightlayer UI | Powering Teams to Make What Matters*" },
    "/overview": {
        "title": "What is Brightlayer UI?",
        "text": "import { Divider, ImageGrid } from '../app/components';\nimport DesignSystemImage from '../app/assets/design-system.jpg';\n\n<!-- KEYWORDS: Overview of V Systems Documentation  -->\n\n# Welcome to V Systems Documentation\n\n<EmbeddedYouTubePlayer videoID={`wwukiFsUsq0`} />\n\nV Systems is a blockchain platform that supports the efficient and agile development of decentralized applications.\n\nV Systems is designed for real world use cases and has a set of composable “no code” smart contract templates that cover the vast majority of real-world smart contract use cases without any need for security audits.\n\n\n## Development\n\nV Systems is a layer-1 public blockchain. Our blockchain development platform makes the technology as user-friendly as possible and greatly ease the burden for developers while exceeding project requirements.\n\n-   To learn about V Systems, check out our [Main Website](https://www.v.systems/).\n-   To dive straight into development, see our [Development Resources](/get-started/where-to-begin) page.\n\n<Divider />\n\n# About this site\n\nThis site will provide you with everything you need to get started with writing applications with the V Systems Protocol:\n\n-   Pre-Requisites, a breakdown of the [V Systems Stack](/get-started/vsys-stack) you will need before writing any code.\n-   Information Guides, including information on starting a [New Project](/get-started/where-to-begin) and the different types of applications you can build\n-   DevNet Guides, including how to set up a [Development Environment](/get-started/where-to-begin), how to start a new project in any of our supported technologies\n-   Code Examples/[Quick Tutorials](/design/intro) explaining how to use our V Systems templated smart contracts.\n-   A [Smart Contracts](/resources) page that describe all the different smart contracts and functionality.\n"
    },
    "/get-started/new-project": {
        "title": "Where to Begin?",
        "text": "import { Divider } from '../../app/components';\n\n<!-- KEYWORDS: web mobile new project compare comparison -->\n\n# New Project Guide\n\nWhen approaching a potential new project, it can be challenging to know where to start. As a first step, it's helpful to decide if this is going to be a web application, mobile application, or both. Here is a run-down of these different types of applications.\n\n## Web Applications\n\nThese applications are accessible over the web. They can be accessed from any device with a network connection and a web browser (personal computer, mobile phone). To learn more about what a web application entails, check out our [Web App](/get-started/web) guide.\n\n## Mobile Applications\n\nMobile applications are intended to be used strictly on mobile devices (e.g., cell phones, tablets, etc.). These can be downloaded directly to the device (e.g., from the App Store or Google Play) and do not have to be connected to the Internet to run. To learn more about what a mobile application entails, including the difference between native and hybrid apps, check out our [Mobile App](/get-started/mobile) guide.\n\n<Divider />\n\n# Deciding What Kind of Application to Build\n\nWith a new project, the nature of the project often determines which type of application you will need.\n\n## This Project is Replacing an Existing Product\n\nThink about the existing product and how it is used. Gather feedback from existing users and identify areas for improvement.\n\nIn general, you will want to at least provide the same type of application as before (unless user feedback suggests that it's not what they need). If you had a web application before, you may want to build a responsive web application this time. Alternatively, you may want to expand on the existing product by offering a mobile application.\n\n## This is a Brand New Product (never before seen)\n\nThink about how the product will be used. Does it offer features that users will want to access on the go? Is it going to be actively used in the field, or is it something users will more likely use from their desk?\n\nIn general, you can't go wrong with a web application. If you do your due diligence and design a properly responsive application, you will be able to access it from any connected device, including mobile. If you suspect that the primary mode of interacting with the application will be from a mobile device or if the application needs to work offline, you may want to consider building a dedicated mobile app.\n"
    },
    "/get-started/web": { "title": "Web Apps" },
    "/get-started/mobile": {
        "title": "Mobile Apps",
        "text": "import { Divider } from '../../app/components';\n\n<!-- KEYWORDS: mobile hybrid compare comparison native application -->\n\n# Mobile Applications\n\nMobile applications are very popular. They can be accessed anywhere you can take your mobile device, both online and offline, and can take greater advantage of device features and capabilities than a web application.\n\nMobile applications come in two primary varieties: native apps and hybrid apps.\n\n## Native mobile apps\n\n-   Must be built using the native code that runs on mobile devices. In general, that means Java (Android) or Swift / Objective C (iOS)\n-   Should adhere to the design and development guidelines for the intended platforms:\n    -   [iOS Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/)\n        <!-- markdown-link-check-disable -->\n    -   [Android Guidelines](https://developer.android.com/design/index.html)\n        <!-- markdown-link-check-enable -->\n\nAndroid and iOS are the dominant players in the mobile market, but you should check with your particular users to see what is most prevalent in your target market.\n\n## Hybrid mobile apps\n\n-   Maintained as a single code base that is deployed to multiple different device types (namely iOS and Android)\n-   Built using web-technologies (i.e. JavaScript)\n    -   low barrier to entry for web developers\n-   Implemented differently depending on the framework:\n    -   some compile down to native components\n    -   others render all content in a web view (essentially a web page running inside of an app)\n\n<Divider style={{}} />\n\n# Comparing the two approaches\n\n## Native mobile apps\n\n-   Guaranteed to look & feel like an app since it uses native components\n-   Requires more specialized development expertise\n-   Requires separate code bases for different operating systems\n    -   Longer development time\n    -   More expensive / more maintenance\n\n## Hybrid mobile apps\n\n-   Reduces development time thanks to shared code base\n-   Provides more technology options\n    -   Many different hybrid platforms / tools available\n-   Allows for a consistent look on different platforms\n-   Makes development easier by using web technologies, but it's also easier to make something that doesn't follow standard mobile patterns\n\n<Divider style={{}} />\n\n# So, which one should you use?\n\nOur recommendation for mobile applications is to take a hybrid approach. This will allow you to deploy multiple versions of your application (i.e. iOS and Android) from a single code base. We offer support for several different approaches to building hybrid apps (see our [Mobile Framework Introduction](/development/frameworks-mobile/intro) to learn about the technologies we support).\n\nIf you prefer to build a strictly native app and adhere to the Brightlayer UI standards, there are ways of doing this using [Material Design Components for Android](https://material.io/develop/android/) and [Material Design Components for iOS](https://material.io/develop/ios/).\n\n> **NOTE:** Brightlayer UI support for native mobile applications is limited - if you are planning to go this route, please [Contact us](/community/contactus).\n"
    },
    "/development/environment": {
        "title": "Environment Setup",
        "text": "import { Divider } from '../../app/components';\n\n<!-- KEYWORDS: developer develop environment guide tutorial -->\n\n# Setting up Your Development Environment\n\nGetting started is often the most frustrating part of application development. Fortunately, many of the modern JavaScript frameworks have made great strides in providing tools to get you up and running as quickly as possible. Below, we walk through the basics of getting your system set up to develop.\n\n## Integrated Development Environment (IDE)\n\nThere are a bunch of different IDEs on the market, and in general you should be able to use any of these that you like and are comfortable with. If you don't have a personal preference, we recommend trying [Visual Studio Code](https://code.visualstudio.com) - it is quite excellent and comes with a variety of tools to make your development experience seamless. And it's free!\n\n## Git\n\nChances are, you probably want to keep your application in source control. Git is one of the big players in this space (it's also the backbone for BitBucket).\n\nYou may already have git installed. To check, run:\n\n```sh\ngit --version\n```\n\nin a command prompt. If you don't have git installed, you can download it from the [Git Website](http://git-scm.com/downloads).\n\nIf you are behind a proxy, you'll also need to set up the git proxies as well:\n\n```sh\ngit config --global http.proxy http://url.to.your.proxy:port\ngit config --global https.proxy http://url.to.your.proxy:port\n```\n\nThe proxy addresses may vary depending on your location. Consult your local IT department if you’re not sure.\n\n## Node\n\nThe majority of JavaScript frameworks (and Brightlayer UI resources) are available via the Node Package Manager (NPM). This package manager allows you to install a variety of third party tools, packages, and other dependencies that you need for your applications. To use NPM, you will need to install [NodeJS](https://nodejs.org/en/download/).\n\n## Yarn\n\nOur projects and example code are set up to be run using yarn, but if you prefer, you're welcome to use NPM in your projects instead. Instructions for installing yarn on various operating systems can be found on the [Yarn Website](https://yarnpkg.com/en/docs/install).\n\nTo check if you have yarn installed, run:\n\n```sh\nyarn -v\n```\n\nfrom a command prompt. If you are behind a proxy, you will also need to configure your proxy settings. It may be sufficient for you to set `HTTP_PROXY` and `HTTPS_PROXY` in your environment variables. However, you may need to also explicitly set proxy values for yarn:\n\n```sh\nyarn config set proxy http://url.to.your.proxy:port\nyarn config set https-proxy http://url.to.your.proxy:port\n```\n\nThe proxy addresses may vary depending on your location. Consult your local IT department if you’re not sure. Once you have configured the proxy, you should be able to install packages by using:\n\n```sh\nyarn add <package-name>\n```\n\n> If you are installing packages globally using yarn, you will need to ensure that your PATH variable has an entry pointing to your global yarn install directory. This location will vary based on your operating system.\n\n<Divider />\n\n# Hybrid App Development\n\nIf you are setting up for building a mobile app, there are some additional steps you will want to take to prepare. The following requirements are the basics. Depending on your selected [framework](/development/frameworks-mobile/intro), there will be other specific setup steps detailed in our Getting Started Guides.\n\n## Prerequisites\n\n### Hardware\n\nMobile development is resource-intensive, so you will need a development machine that is up to the task. Your machine should at least match the following minimum requirements:\n\n-   a Mac (if you plan on building or testing iOS locally)\n-   16GB RAM or more (running multiple emulators can easily push you over 20GB)\n-   Solid State Hard Drive (SSD)\n-   5/6 Gen Core i7 with Virtualization Technology or better\n\n### Software\n\nThere are a few software tools that you will need before you can get started:\n\n<!-- markdown-link-check-disable -->\n\n-   [Android Studio](https://developer.android.com/studio/) (required for building for Android)\n    <!-- markdown-link-check-enable -->\n-   [xCode](https://developer.apple.com/xcode/) (Mac-only, required for building for iOS)\n"
    },
    "/development/cli": {
        "title": "Brightlayer UI CLI",
        "text": "import { Divider, EmbeddedYouTubePlayer } from '../../app/components';\n\n<!-- KEYWORDS: cli command line interface new project start -->\n\nTesting is a critical component of successfully building and releasing an application. Despite the value and importance of testing, it is common for teams to overlook or neglect it. Testing should be considered from the very beginning of development, not as an afterthought once development is complete. In general, every time you write a new piece of code or update existing code, you should also write a test that verifies that your code is correct.\n\nThere are many [varieties of tests](https://www.atlassian.com/continuous-delivery/software-testing/types-of-software-testing), each with their own intended purpose. The most common types of tests are:\n\n-   **Unit Tests**: verify individual methods, functions, or components.\n-   **Integration Tests**: verify that different modules or services in your application work together.\n-   **Functional Tests**: verify the output of certain actions based on business requirements.\n-   **End-to-end (E2E) Tests**: verify that user behaviors / workflows function as expected.\n-   **Acceptance Tests**: verify that the entire system meets the business requirements.\n-   **Performance Tests**: verify that the system behaves correctly under heavy load.\n-   **Smoke Tests: quick**: basic checks of the major features of the application.\n\nThis document focuses mainly on Unit Tests and E2E tests, as they are the easiest to automate.\n\n<Divider />\n\n# Unit Tests\n\nUnit tests target the smallest pieces of your application (such as verifying inputs and outputs of a class method or function). These will likely make up the bulk of your tests because they are quick to write, easy to automate, and can help you achieve significant code coverage.\n\n> Code Coverage measures the percentage of your code that is verified by your tests.\n\nA unit test shouldn't have any external dependencies, such as other methods or APIs. By keeping unit tests isolated in this manner, it's easy to identify the cause of a failing test and implement a fix quickly. When you start combining features and methods together, you move into the realm of _integration testing_.\n\n## When to Write\n\nAs long as you are writing tests and achieving acceptable levels of coverage, the _when_ is not as important.\n\nSome teams elect to follow a Test-Driven Development (TDD) methodology, where unit tests are written prior to any code. In this situation the tests actually define the desired implementation of the application and the code is written to satisfy the tests.\n\nBehavior-Driven Development (BDD) is similar to TDD in that test cases are written prior to writing any applications code. However, these test cases focus more on the desired behavior (inputs and outputs) of the application, and less on the actual implementation. These are usually written in plain language rather than code.\n\nThe most important thing to keep in mind about tests is that they should provide confidence that the code and design are working as intended without issues in any scenario. For most teams, it's fine to write tests after features and functions are developed, so long as you write quality tests and achieve good coverage.\n\n## How to Write\n\nWhen unit testing components, the most effective tests are based on what is actually rendered on the screen rather than the internal implementation logic. The test should consider the application from the user's perspective and test things the user views and interacts with.\n\nFor example, consider testing an Open Button that should open a modal dialog when clicked. Your test should check that a button with the _Open_ label is rendered on the screen, and when it is clicked, the dialog is rendered on the screen with the correct content. You may be tempted to identify the button by a class or id, or test that a particular function is called when the button is pressed - these tests are not as effective because they are more likely to break if the implementation of the component changes, even though the end behavior is the same.\n\n-   Test what the user sees (i.e., rendered output) and what the user can do  (i.e., interactions).\n-   If there is visual change after an interaction, test for it.\n-   If there is a value returned after an action, test for it.\n\n## Testing Frameworks\n\nAngular, React, and React Native all come with built-in unit testing frameworks. Ionic can be unit tested using the same tools you would use for a standard Angular application.\n\n### Angular\n\nThe Angular CLI comes pre-configured with [Jasmine](https://jasmine.github.io/2.0/introduction) and [Karma](https://karma-runner.github.io/latest/index.html) for unit testing. When you create a new project, sample tests are created in your project for you (test files are identified by the `.spec.ts` file extension). You can execute the tests by running the following in your terminal:\n\n```sh\ncd your/project/root\nng test\n```\n\nThis will build your app and launch the browser with the test runner.\n\n### React\n\nThe Create React App CLI is pre-configured with the [Jest](https://github.com/facebook/jest) testing framework. When creating a new project, a sample test is created in your project for you (test files are identified by the `.test.js` or `test.ts` file extension). You can execute the tests by running the following in your terminal:\n\n```sh\ncd your/project/root\nnpm run test\n// or\nyarn test\n```\n\nThis will run your tests and show the pass / fail output in the terminal.\n\nThere are additional test utilities that complement Jest well. [Create React App](https://facebook.github.io/create-react-app/docs/running-tests) provides access to [React Testing Library](https://www.npmjs.com/package/@testing-library/react) through the `react-dom` dependency. The Brightlayer UI team has also made use of [Enzyme](https://airbnb.io/enzyme/), a testing framework created by AirBnB, and [Test Renderer](https://reactjs.org/docs/test-renderer.html).\n\n### React Native\n\nLike React, the React Native CLI also bundles Jest into your application. Most of the testing strategies and libraries can be shared between the two frameworks. You can also consider additional libraries like [React Native Testing Library](https://www.npmjs.com/package/@testing-library/react-native).\n\n### Ionic\n\nWhen creating an Ionic project with Angular, the Angular CLI is used to generate the underlying project, so you have access to all the same testing tools as you would with a regular Angular project.\n\n<Divider />\n\n# End-to-End Testing\n\nEnd-to-end tests at a step above unit tests, both in terms of complexity and what they test. They focus primarily on the flow of the application, making sure that a user's journey through the application has the expected outcomes. These tests can generally be categorized as:\n\n-   **Acceptance Tests**: verify that various features and flows meet the customer expectations.\n-   **Regression Tests**: verify that existing functionality is not broken when new features are added.\n\nThey should cover user stories that span multiple components and views, such as signing up for an accounts, logging in and out of the application, updating a profile, etc. These tests are not concerned with the underlying state or implementation of the application - just the end results.\n\nEnd-to-end tests usually run in a browser against a live system (in the case of web, using a test runner that automates the browser). Automated E2E tests can take a long time to run because of all of the different pieces involved and the scope of the tests. You should try to optimize your testing pipeline to run tests in parallel to finish faster.\n\nFunctional tests alone will not give you enough test coverage to avoid regressions. Unit tests aim to provide code coverage depth, while functional tests provide coverage over the breadth of user test scenarios.\n\n## How to Write\n\nEnd-to-end tests rely on the ability to find elements on the screen and interact with them in an automated way. This means that you need a reliable mechanism for selecting elements. Depending on your testing framework, there are different ways to select elements, including:\n\n-   **CSS Selectors**: find elements by using CSS classes or rules (e.g., `.your-class-name`)\n-   **Element Selectors**: find elements inside the elements (e.g., `#\\@\\@blui-drawerlayout-content > div > header > div > button`)\n-   **xPath Selectors**: find selector within xPath (e.g., `//*[@id=\"@@blui-drawerlayout-content\"]/div/header/div/button`)\n-   **ID Selectors**: find attribute id within elements (e.g., `#login-button`)\n\n> You can read more about different selector strategies on [browserstack](https://www.browserstack.com/guide/css-selectors-in-selenium) and [software testing help](https://www.guru99.com/find-element-selenium.html).\n\nEach of these methods has their own advantages and disadvantages. A common pain point in E2E test automation is that modern Javascript platforms are constantly changing, particularly in the open source community. Many of these frameworks automatically (and dynamically) generate IDs and classes for components resulting in a constantly moving target for automation tooling. Identifying elements by these values (i.e., using IDs, CSS, or xPath locators _without_ property attributes) makes your tests brittle because they are subject to change any time a new version comes out (or even any time the page is reloaded).\n\nOne way to combat this in your own applications is to use dedicated attributes for testing (e.g., `test-id` or `dev-id`). By adding this test-specific attribute to the element, identifying the correct underlying component should be safer. Because this attribute is test-specific and the application logic does not use it, it will be less likely to change throughout the product lifecycle. Combining this approach with other selectors is a common and reliable approach for element identification.\n\n```html\n<!-- Component code -->\n<button id=\"login-button\" class=\"default-button\">Login</button>\n\n<!-- Selector to use in a test -->\nWebElement click = driver.findElement(By.id(\"login-button\"));\n```\n\n## Testing Frameworks\n\nThere are many tools available for configuring automated E2E tests. Some of the more popular tools include:\n\n-   [Selenium](https://www.selenium.dev/documentation/en/)\n-   [Cypress](https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell)\n-   [WebDriverIO](https://webdriver.io/docs/gettingstarted.html)\n\n### Selenium\n\nSelenium is a popular automation testing suite which can be used to automate the desktop and mobile web browser interactions. You can write test code in any of the languages supported by Selenium.\n\nSelenium test suite has several test frameworks available and each one can be customized to your project needs.\n\nFor more information, check out the browserstack [selenium guide](https://www.browserstack.com/guide/selenium-framework) or the official [selenium documentation](https://github.com/SeleniumHQ/selenium).\n\nThere are also a number of [Selenium tutorials](https://www.guru99.com/selenium-tutorial.html) available online to help you get started.\n\n### Cypress\n\nCypress is a popular open source testing framework that boasts support for any modern JavaScript framework. It works well for E2E tests in both Angular and React applications and is easier to use than some of the more traditional tools, such as Selenium.\n\nFor a more detailed write-up on Cypress, check out the official [Cypress Documentation](https://docs.cypress.io/guides/getting-started/installing-cypress.html#System-requirements).\n\n### WebDriverIO\n\nWebdriverIO is a popular Javascript based test automation framework built on top of node.js. It is an open-source project developed for the automation testing community. WebdriverIO is extendible, compatible and feature-rich.\n\nFor more information, check out the official [Webdriver.io documentation](https://webdriver.io/) and their [getting started guide](https://webdriver.io/docs/gettingstarted.html).\n\n<Divider />\n"
    },
    "/development/frameworks-web/intro": {
        "title": "Introduction",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: introduction web framework compare comparison -->\n\n# Brightlayer UI Web Frameworks\n\nBrightlayer UI supports web application development using Angular and React. Both are open source JavaScript frameworks with large communities of support and both have open source component libraries implementing Material Design. The two are quite comparable and you would not go wrong by choosing either, but there are some notable differences outlined below.\n\n## Angular (with Angular Material)\n\n-   A comprehensive framework, with a lot of built-in features and functionality\n-   Written in TypeScript (superset of JavaScript with strong variable typing)\n-   Structured way of organizing your entire application (if following the Angular CLI)\n-   May be more accessible to developers with greater back-end or full-stack experience\n-   Maintained by Google\n-   Learn more on the [Angular website](https://angular.io/)\n\n## React (with Material UI)\n\n-   A UI library for building custom Web Components / Applications\n-   Can be combined with additional libraries (e.g. Redux) to be a more comprehensive framework\n-   Virtual DOM allows for fewer re-renders (i.e., faster UI updates)\n-   May be more accessible to developers with greater experience with JavaScript and front-end development\n-   Maintained by Facebook\n-   Learn more on the [React website](https://reactjs.org/)\n\n<Divider style={{}} />\n\n# Which framework should I use?\n\nChoosing a framework is entirely up to you. They each have their own pros and cons, so you'll need to decide what is best for your application. In general, if you have developers who are very familiar with a particular framework, it might be worthwhile to use that framework to avoid any unnecessary learning curves associated with a new one. If you don't have development resources yet, you will probably want to conduct a more in-depth analysis of the available frameworks to decide what is most appropriate for your application. Feel free to reach out to us for assistance if needed.\n\nIf you choose to use one of these frameworks, have a look at our Guides for using them with Brightlayer UI:\n\n-   [Angular Guide](/development/frameworks-web/angular)\n-   [React Guide](/development/frameworks-web/react)\n"
    },
    "/development/frameworks-web/angular": {
        "title": "Angular Guide",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: angular web framework guide tutorial -->\n\n# Getting Started with Angular\n\nThe following instructions will guide you through starting a new Brightlayer UI project using Angular. Alternatively, you can also start your project by downloading one of our code samples from [Github](https://github.com/brightlayer-ui) (the Login or Navigation examples are good projects to start from).\n\n## Using the Brightlayer UI CLI\n\nThe fastest way to start a new Brightlayer UI project is to use the [Brightlayer UI CLI](/development/cli). The CLI will automatically create a starter project for you (using the [Angular CLI](http://cli.angular.io/)) with all of the necessary Brightlayer UI dependencies pre-configured. To start an Angular project:\n\n```sh\nnpx -p @brightlayer-ui/cli blui new angular\n```\n\nYou will be asked to provide a name for your project and whether or not you want to use the Brightlayer UI eslint and prettier configurations files.\n\nThe Brightlayer UI CLI will automatically include:\n\n-   Angular Material Component Library ([@angular/material](https://www.npmjs.com/package/@angular/material))\n-   Brightlayer UI Component Library ([@brightlayer-ui/angular-components](https://www.npmjs.com/package/@brightlayer-ui/angular-components))\n-   Brightlayer UI Themes ([@brightlayer-ui/angular-themes](https://www.npmjs.com/package/@brightlayer-ui/angular-themes))\n-   Brightlayer UI Icons ([@brightlayer-ui/icons](https://www.npmjs.com/package/@brightlayer-ui/icons))\n-   Brightlayer UI Colors ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors))\n-   Open Sans web font ([@font-source/open-sans](https://www.npmjs.com/package/@fontsource/open-sans))\n-   Brightlayer UI ESLint and Prettier configurations, if selected ([@brightlayer-ui/eslint-config](https://www.npmjs.com/package/@brightlayer-ui/eslint-config) / [@brightlayer-ui/prettier-config](https://www.npmjs.com/package/@brightlayer-ui/prettier-config))\n\nFor detailed usage instructions, refer to the [Brightlayer UI CLI documentation](https://www.npmjs.com/package/@brightlayer-ui/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate Brightlayer UI, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the Brightlayer UI CLI.\n\n<Divider />\n\n# Manual Brightlayer UI Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the Brightlayer UI CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### Angular Material\n\nAngular projects should make use of the [Angular Material](https://material.angular.io/) component library. Our Brightlayer UI themes are designed to work with these components.\n\n```sh\nnpm install --save @angular/material\n// or\nyarn add @angular/material\n```\n\nFor detailed documentation about the various components available in Angular Material, as well as sample code and API reference, refer to the [Angular Material Documentation](https://material.angular.io/components/).\n\n### Brightlayer UI Components\n\nAdditionally, we have a [supplemental library](https://github.com/brightlayer-ui/angular-component-library/tree/dev) of components designed specifically for Brightlayer UI applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @brightlayer-ui/angular-components\n// or\nyarn add @brightlayer-ui/angular-components\n```\n\n## Adding Brightlayer UI Themes\n\nBy default, your application will be themed with the Google Material theme. To use the [Brightlayer UI theme](https://www.npmjs.com/package/@brightlayer-ui/angular-themes), first install it:\n\n```sh\nnpm install --save @brightlayer-ui/angular-themes\n// or\nyarn add @brightlayer-ui/angular-themes\n```\n\nInstalling the theme package will automatically include the Open Sans web font package as well as the Brightlayer UI [colors](https://www.npmjs.com/package/@brightlayer-ui/colors) package. In order to use the Brightlayer UI themes and font (Open Sans), you will need to modify your angular.json file \"styles\" entries (there is one under \"build\" and one under \"test\") to include the Brightlayer UI themes and Open Sans reference:\n\n```json\n\"styles\": [\n    \"src/styles.scss\",\n    \"./node_modules/@brightlayer-ui/angular-themes/theme.scss\",\n    \"./node_modules/@brightlayer-ui/angular-themes/open-sans.scss\",\n],\n```\n\n### Applying the Theme\n\nYou can apply the theme to your application by adding the proper class to your application's body element:\n\n```html\n// Default Theme\n<body class=\"blui-blue\" />\n\n// Dark Theme\n<body class=\"blui-blue-dark\" />\n```\n\n> If you do not specify a theme class, your application will use the default Material theme.\n\nYou can access the fonts using mat-typography, e.g.:\n\n```html\n<section class=\"mat-typography>\n   <h1>H1 Text</h1>\n   <h2>H2 Text</h2>\n   <p>Paragraph text</p>\n   <div class=\"body-2\">Bold body copy</div>\n</section>\n```\n\nYou can access theme colors as well, e.g.:\n\n```html\n<mat-toolbar color=\"primary\">My App</mat-toolbar>\n```\n\nMore details about applying themes in your application can be found in [Theming your Angular Material app](https://material.angular.io/guide/theming).\n\n<Divider />\n\n# Additional Information\n\n## Code Formatting / Style\n\nBrightlayer UI provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the Brightlayer UI team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/brightlayer-ui/code-standards).\n\n## Browser Support\n\nBrightlayer UI supports the same browsers as Angular and Angular Material. For specifics, please check out their support pages:\n\n-   [Angular CLI](https://angular.io/guide/browser-support)\n-   [Angular Material](https://github.com/angular/material2#browser-and-screen-reader-support)\n\n> With the end-of-life of Internet Explorer 11, Brightlayer UI will no longer be supporting IE11 as of 2021.\n\n## License Information\n\n[Angular](https://github.com/angular/angular/blob/master/LICENSE) and [Angular Material](https://github.com/angular/material2/blob/master/LICENSE) are both available under the MIT License.\n"
    },
    "/development/frameworks-web/react": {
        "title": "React Guide",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: react web framework guide tutorial -->\n\n# Getting Started with React\n\nThe following instructions will guide you through starting a new Brightlayer UI project using React. Alternatively, you can also start your project by downloading one of our code samples from [Github](https://github.com/brightlayer-ui) (the Login or Navigation examples are good projects to start from).\n\n## Using the Brightlayer UI CLI\n\nThe fastest way to start a new Brightlayer UI project is to use the [Brightlayer UI CLI](/development/cli). The CLI will automatically create a starter project for you (using [Create React App](https://github.com/facebookincubator/create-react-app)) with all of the necessary Brightlayer UI dependencies pre-configured. To start a React project:\n\n```sh\nnpx -p @brightlayer-ui/cli blui new react\n```\n\nYou will be asked to provide a name for your project, choose whether you would like to use TypeScript or JavaScript, and for TypeScript projects, you'll be asked if you want to use the Brightlayer UI eslint and prettier configurations files.\n\nThe Brightlayer UI CLI will automatically include:\n\n-   Material-UI Component Library and Icons ([@material-ui/core](https://www.npmjs.com/package/@material-ui/core) / [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons))\n-   Brightlayer UI Component Library ([@brightlayer-ui/react-components](https://www.npmjs.com/package/@brightlayer-ui/react-components))\n-   Brightlayer UI Themes ([@brightlayer-ui/react-themes](https://www.npmjs.com/package/@brightlayer-ui/react-themes))\n-   Brightlayer UI Icons ([@brightlayer-ui/icons-mui](https://www.npmjs.com/package/@brightlayer-ui/icons-mui))\n-   Brightlayer UI Colors ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors))\n-   Open Sans web font ([@fontsource/open-sans](https://www.npmjs.com/package/@fontsource/open-sans))\n-   Brightlayer UI ESLint and Prettier configurations, if selected ([@brightlayer-ui/eslint-config](https://www.npmjs.com/package/@brightlayer-ui/eslint-config) / [@brightlayer-ui/prettier-config](https://www.npmjs.com/package/@brightlayer-ui/prettier-config))\n-   Enzyme testing library ([enzyme](https://www.npmjs.com/package/enzyme) / [enzyme-adapter-react-16](https://www.npmjs.com/package/enzyme-adapter-react-16))\n\nFor detailed usage instructions, refer to the [Brightlayer UI CLI documentation](https://www.npmjs.com/package/@brightlayer-ui/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate Brightlayer UI, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the Brightlayer UI CLI.\n\n<Divider />\n\n# Manual Brightlayer UI Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the Brightlayer UI CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### Material UI\n\nReact projects should make use of the [Material-UI](https://mui.com/) component library. Our Brightlayer UI themes are designed to work with these components. You'll also want to install the icons.\n\n```sh\nnpm install --save @material-ui/core @material-ui/icons\n// or\nyarn add @material-ui/core @material-ui/icons\n```\n\nFor detailed documentation about the various components available in Material UI, as well as sample code and API reference, refer to the [Material UI Documentation](https://mui.com/).\n\n### Brightlayer UI Components\n\nAdditionally, we have a [supplemental library](https://github.com/brightlayer-ui/react-component-library/tree/dev) of components designed specifically for Brightlayer UI applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @brightlayer-ui/react-components\n// or\nyarn add @brightlayer-ui/react-components\n```\n\n## Adding Brightlayer UI Themes\n\nBy default, your application will be themed with the Google Material theme. To use the [Brightlayer UI theme](https://www.npmjs.com/package/@brightlayer-ui/react-themes), first install it:\n\n```sh\nnpm install --save @brightlayer-ui/react-themes\n// or\nyarn add @brightlayer-ui/react-themes\n```\n\nInstalling the theme package will automatically include the Open Sans web font package as well as the Brightlayer UI [colors](https://www.npmjs.com/package/@brightlayer-ui/colors) package.\n\n### Applying the Theme\n\nImport the theme files, Material UI theme provider, and **Open Sans** font into your application, e.g. in App.js:\n\n```tsx\nimport { ThemeProvider, createTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport * as BLUIThemes from '@brightlayer-ui/react-themes';\nimport '@brightlayer-ui/react-themes/open-sans';\n```\n\nTo add the theme to your whole application, you would simply add a `<ThemeProvider>` around your top-level component and pass it the theme you want to use, e.g.:\n\n```tsx\n<ThemeProvider theme={createTheme(BLUIThemes.blue)}>\n    <CssBaseline/>\n    <MyApp/>\n</MuiThemeProvider>\n```\n\nYou can read about [React Theming](https://mui.com/customization/theming/) to learn more.\n\n<Divider />\n\n# Additional Information\n\n## Code Formatting / Style\n\nBrightlayer UI provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the Brightlayer UI team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/brightlayer-ui/code-standards).\n\n> NOTE: the ESLint package is only available for TypeScript projects.\n\n## Browser Support\n\nBrightlayer UI supports the same browsers as React and Material UI. For specifics, please check out their support pages:\n\n-   [React](https://facebook.github.io/create-react-app/docs/supported-browsers-features)\n-   [Material UI](https://mui.com/getting-started/supported-platforms/)\n\n> With the end-of-life of Internet Explorer 11, Brightlayer UI will no longer be supporting IE11 as of 2021.\n\n## License Information\n\n[React](https://github.com/facebook/react/blob/master/LICENSE) and [Material UI](https://github.com/mui-org/material-ui/blob/master/LICENSE) are both available under the MIT License.\n"
    },
    "/development/frameworks-mobile/intro": {
        "title": "Introduction",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: mobile hybrid framework compare comparison -->\n\n# Brightlayer UI Mobile (Hybrid) Frameworks\n\nBrightlayer UI supports hybrid mobile application development using Ionic and React Native. Both are capable frameworks, but there are some significant differences between them, outlined below.\n\n## Ionic\n\n-   Built with web technology (framework agnostic)\n    -   Brightlayer UI only supports Ionic with Angular\n-   Runs in a WebView\n-   Is the fastest way to have a mobile app (if you already have a web app)\n-   Requires your web app to be optimized for mobile\n-   Has lots of available plugins to access hardware / native functionality\n-   Learn more on the [Ionic Website](https://ionicframework.com/)\n\n## React Native\n\n-   Renders native UI elements (not a WebView)\n-   Can re-use application logic code (React)\n-   Requires writing new code for UI (learning curve)\n-   Does not use CSS for styling (learning curve)\n-   Provides access to hardware functionality through various plugins / libraries\n-   Has a large community of support\n-   Learn more on the [React Native Website](https://facebook.github.io/react-native/)\n\n<Divider style={{}} />\n\n# Which framework should I use?\n\nThis is entirely up to you. If time is your biggest concern, Ionic may be the best approach since it simply wraps an existing application and requires no additional code.\n\nHowever, if you want more control over the look and performance of your application, it may be better to use React Native. If you have a React application, you'd be able to re-use most of your application logic, but you have to write custom / dedicated UI views for mobile.\n\nIn general, if your development team is more familiar with Angular, we recommended using Ionic. If your team is more familiar with React, you won't go wrong by choosing React Native.\n\n<Divider style={{}} />\n\n# Building your application\n\nFollow the guidelines for app development using your chosen framework:\n\n-   [Ionic](/development/frameworks-mobile/ionic)\n    <!-- -   [Apache Cordova](/development/frameworks-mobile/cordova) -->\n-   [React Native](/development/frameworks-mobile/react-native)\n\nThese guides will walk you through the process of developing your application and ultimately creating a final binary to distribute (either to your testers or your final customers).\n\n## Deploying your application\n\nOnce you have built your application into a distributable binary, there are two options for distributing it.\n\n### Visual Studio App Center (formerly HockeyApp)\n\nVisual Studio App Center gives you a way to test your app with users before you are ready for final distribution. This service allows you to upload app binaries and create lists of people with whom to share them. These people will be notified via email when new versions of the app are available, and they will be prompted to download and install them directly onto their device. You will need to request access to Visual Studio App Center from IT.\n\n### App Store / Play Store\n\nFor final distribution of your application, you will need to utilize App Store Connect and / or Google Play Console.\n"
    },
    "/development/frameworks-mobile/ionic": {
        "title": "Ionic Guide",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: ionic mobile hybrid framework guide tutorial -->\n\n# Getting Started with Ionic\n\nThe following instructions will guide you through setting up your computer for Ionic development and starting a new Brightlayer UI project. Alternatively, you can start your project by downloading one of our code samples from [Github](https://github.com/brightlayer-ui) (the Login example is a good project to start from) once you configure your environment.\n\n<Divider />\n\n# Setting Up Your Environment\n\nYou'll need to start by following the general instructions for setting up your development environment for mobile, found in our [Environment Guide](/development/environment). Since Ionic takes advantage of web technologies, you won't need any specific additional tools beyond what you would use for web development.\n\nIonic uses Cordova behind the scenes but offers some additional convenience tools on top. If you would prefer to write a pure Cordova application, you can read instructions in the [Apache Cordova Getting Started Guide](/development/frameworks-mobile/cordova).\n\n## Installing Ionic\n\nThe most up-to-date instructions for setting up Ionic can be found on the [Ionic Website](https://ionicframework.com/docs/installation/cli).\n\nTo get started, run:\n\n```sh\nnpm install -g @ionic/cli cordova\n// or\nyarn global add @ionic/cli cordova\n```\n\nYou'll also want to install some additional dependencies:\n\n```sh\nnpm install -g native-run gradle cordova-res\n// or\nyarn global add native-run gradle cordova-res\n```\n\nMake sure that you have a `GRADLE_HOME` entry in your PATH variable pointing to your gradle binary directory.\n\n<Divider />\n\n# Creating Your Application\n\n## Using the Brightlayer UI CLI\n\nThe fastest way to start a new Brightlayer UI project is to use the [Brightlayer UI CLI](/development/cli). The CLI will automatically create a starter project for you (using either the [Ionic CLI](https://ionicframework.com/docs/cli)) with all of the necessary Brightlayer UI dependencies pre-configured. To start an Ionic project:\n\n```sh\nnpx -p @brightlayer-ui/cli blui new ionic\n```\n\nYou will be asked to provide a name for your project and whether or not you want to use the Brightlayer UI eslint and prettier configurations files.\n\nThe Brightlayer UI CLI will automatically include:\n\n-   Angular Material Component Library ([@angular/material](https://www.npmjs.com/package/@angular/material))\n-   Brightlayer UI Component Library ([@brightlayer-ui/angular-components](https://www.npmjs.com/package/@brightlayer-ui/angular-components))\n-   Brightlayer UI Themes ([@brightlayer-ui/angular-themes](https://www.npmjs.com/package/@brightlayer-ui/angular-themes))\n-   Brightlayer UI Icons ([@brightlayer-ui/icons](https://www.npmjs.com/package/@brightlayer-ui/icons))\n-   Brightlayer UI Colors ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors))\n-   Brightlayer UI ESLint and Prettier configurations, if selected ([@brightlayer-ui/eslint-config](https://www.npmjs.com/package/@brightlayer-ui/eslint-config) / [@brightlayer-ui/prettier-config](https://www.npmjs.com/package/@brightlayer-ui/prettier-config))\n\nFor detailed usage instructions, refer to the [Brightlayer UI CLI documentation](https://www.npmjs.com/package/@brightlayer-ui/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate Brightlayer UI, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the Brightlayer UI CLI.\n\n<Divider />\n\n# Manual Brightlayer UI Integration\n\nPlease refer to the Manual Brightlayer UI Integration steps for [Angular](/development/frameworks-web/angular).\n\n<Divider />\n\n# Writing an Ionic Application\n\nDeveloping an Ionic project with Angular is virtually identical to writing a normal web application using Angular.\n\n## Running your application\n\n`ionic serve` will run the application in a web browser on localhost:8100. In order to see the application run on a mobile device, you will need to add platforms.\n\n```sh\nionic cordova platform add android\nionic cordova platform add ios\n```\n\n> **NOTE**: You will only be able to add the ios platform if you are developing on a Mac.\n\nWhen the ionic cordova platform add completes, your project will have all the required native plugins installed along with several configuration files specific to your project.\n\n## Building your application\n\nThe project is now ready to build and you can run:\n\n```sh\nionic cordova build android\nionic cordova build ios\n```\n\nOnce complete, you can run your project in a device simulator (or connected device) by running:\n\n```sh\nionic cordova run android\nionic cordova run ios\n```\n\n<Divider />\n\n# Additional Information\n\n## Code Formatting / Style\n\nBrightlayer UI provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the Brightlayer UI team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/brightlayer-ui/code-standards).\n\n> **NOTE**: Depending on your version of Xcode, you may need to specify additional build flags to run on ios: `ionic cordova run ios --buildFlag=\"-UseModernBuildSystem=0\"`.\n\n## License Information\n\n[Ionic](https://ionicframework.com/docs/intro#license) is available under the MIT License.\n"
    },
    "/development/frameworks-mobile/react-native": {
        "title": "React Native Guide",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: react native mobile hybrid framework guide tutorial -->\n\n# Getting Started with React Native\n\nThe following instructions will guide you through setting up your computer for React Native development and starting a new Brightlayer UI project. Alternatively, you can start your project by downloading one of our code samples from [GitHub](https://github.com/brightlayer-ui) (the Login example is a good project to start from) once you configure your environment.\n\n<Divider />\n\n# Setting Up Your Environment\n\nYou'll need to start by following the general instructions for setting up your development environment for mobile found in our [Environment Guide](/development/environment). In addition to the base requirements, you may also want the following:\n\n-   [Expo Client](https://expo.io/learn) (project creation / setup tool for React Native apps)(optional, for Expo projects)\n\n<Divider />\n\n# Creating Your Application\n\n## Using the Brightlayer UI CLI\n\nThe fastest way to start a new Brightlayer UI project is to use the [Brightlayer UI CLI](/development/cli). The CLI will automatically create a starter project for you (using either the [React Native Community CLI](https://github.com/react-native-community/cli) (recommended) or [Expo CLI](https://docs.expo.io/)) with all of the necessary Brightlayer UI dependencies pre-configured. To start a React Native project:\n\n```sh\nnpx -p @brightlayer-ui/cli blui new react-native\n```\n\nYou will be asked to provide a name for your project, select a CLI to use, choose whether you would like to use TypeScript or JavaScript, and for TypeScript projects, you'll be asked if you want to use the Brightlayer UI eslint and prettier configurations files.\n\nThe Brightlayer UI CLI will automatically include:\n\n-   React Native Paper Component Library ([react-native-paper](https://www.npmjs.com/package/react-native-paper))\n-   Brightlayer UI Component Library ([@brightlayer-ui/react-native-components](https://www.npmjs.com/package/@brightlayer-ui/react-native-components))\n-   Brightlayer UI Themes ([@brightlayer-ui/react-native-themes](https://www.npmjs.com/package/@brightlayer-ui/react-native-themes))\n-   Material Icons ([react-native-vector-icons](https://www.npmjs.com/package/react-native-vector-icons))\n-   Brightlayer UI Icons ([@brightlayer-ui/icons-svg](https://www.npmjs.com/package/@brightlayer-ui/icons-svg))\n-   Brightlayer UI Colors ([@brightlayer-ui/colors](https://www.npmjs.com/package/@brightlayer-ui/colors))\n-   Open Sans font\n-   Brightlayer UI ESLint and Prettier configurations, if selected ([@brightlayer-ui/eslint-config](https://www.npmjs.com/package/@brightlayer-ui/eslint-config) / [@brightlayer-ui/prettier-config](https://www.npmjs.com/package/@brightlayer-ui/prettier-config))\n-   Testing libraries ([jest](https://www.npmjs.com/package/jest) / [react-test-renderer](https://www.npmjs.com/package/react-test-renderer))\n\nFor detailed usage instructions, refer to the [Brightlayer UI CLI documentation](https://www.npmjs.com/package/@brightlayer-ui/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate Brightlayer UI, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the Brightlayer UI CLI.\n\n<Divider />\n\n# Manual Brightlayer UI Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the Brightlayer UI CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### Material Components\n\nReact Native projects should make use of the [React-Native-Paper](https://callstack.github.io/react-native-paper/index.html) component library. Our Brightlayer UI themes are designed to work with these components. You'll also want to install [react-native-vector-icons](https://www.npmjs.com/package/react-native-vector-icons) to access the Material icons.\n\n```sh\nnpm install --save react-native-paper react-native-vector-icons\n// or\nyarn add react-native-paper react-native-vector-icons\n```\n\n### Brightlayer UI Components\n\nWe have a [supplemental library](https://github.com/brightlayer-ui/react-native-component-library/tree/dev) of components designed specifically for Brightlayer UI applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @brightlayer-ui/react-components\n// or\nyarn add @brightlayer-ui/react-native-components\n```\n\n## Adding Brightlayer UI Themes\n\nIf you are using the recommended component libraries, your application will be themed with the Google Material theme by default. To use the Brightlayer UI theme, first install it:\n\n```sh\nnpm install --save @brightlayer-ui/react-native-themes\n// or\nyarn add @brightlayer-ui/react-native-themes\n```\n\n> Using the Brightlayer UI React Native theme **requires** that you add the Open Sans font to your application. You can learn how to do this by reading the instructions for [Vanilla React Native](https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e) or [Expo](https://docs.expo.io/guides/using-custom-fonts/). You can find the fonts [here](https://github.com/brightlayer-ui/cli-helpers/tree/master/fonts).\n\n> When using Expo, you will need to specify the name for each font weight you load using the format OpenSans-`<Weight>`, e.g., OpenSans-SemiBold. Refer to one of our React Native demos for reference.\n\n## Applying the Theme\n\nImport the theme files and React Native Paper theme provider into your application, e.g. in App.js:\n\n```tsx\nimport { Provider as ThemeProvider } from 'react-native-paper';\nimport * as BLUIThemes from '@brightlayer-ui/react-native-themes';\n...\n<ThemeProvider theme={BLUIThemes.blue}>\n    <App />\n</ThemeProvider>\n```\n\nFor detailed information about theming, refer to the react-native-paper [theming guide](https://callstack.github.io/react-native-paper/theming.html).\n\n> NOTE: This theme only applies to the components in the react-native-paper and @brightlayer-ui/react-native-components package. It will not theme the components from other third party libraries. If you wish to use our theme to style your own components, refer to the react-native-paper [theming guide](https://callstack.github.io/react-native-paper/theming.html#using-the-theme-in-your-own-components).\n\n### Avoiding Repeated Styles\n\nTo avoid adding repeatedly adding inline styles to standard components, you can define your own component that applies the styles and use that throughout your application, e.g.:\n\n```tsx\n// MyText.js\nexport default MyText = ({style, children, ...other}) => (\n    <Text {...other} style={StyleSheet.flatten([{/* Theme styles here */}, style])}>\n        {children}\n    </Text>\n);\n\n// OtherFile.js\nimport Text from 'path/to/MyText.js';\n...\n<Text>Themed Text Object</Text>\n```\n\n<Divider />\n\n# Writing a React Native Application\n\nIf you are familiar with React development, React Native will be relatively simple to understand. The application logic remains the same, while the UI requires a little adjustment. Rather than typical HTML elements, React Native UIs are built with a special library of [Components](https://facebook.github.io/react-native/docs/components-and-apis), including `<View>`, `<Text>`, `<Image>`, etc. React Native layouts are built exclusively using FlexBox.\n\n## Running your application\n\nAfter you've created your application with a CLI, it can be run from the command line:\n\n```sh\ncd YourAppName\n\n// RNC CLI\nnpm run <ios|android>\n// or\nyarn <ios|android>\n\n// Expo CLI (follow the on-screen instructions or use the web interface to open the app on a device)\nnpm run start\n// or\nyarn start\n```\n\nWhen you make changes to the source code, the application will automatically rebuild and update on the device.\n\n> To run on an Android emulator, the emulator must already be running or you will see an error message, \"No connected devices found.\"\n\n> On a Mac, you may be prompted to install watchman (`brew install watchman`) or update a few settings to run the application.\n\n## Ejecting from Expo\n\nIf you use Expo to create your project, there will come a time in your development when it becomes necessary to eject from Expo. The most common reason for this are for adding native libraries to your project.\n\nTo eject your app, run the following and follow the on-screen prompts (WARNING: Ejecting from Expo cannot be undone. Make sure you know what you are doing and have your project in source control before proceeding):\n\n```sh\nnpm run eject\n// or\nyarn eject\n```\n\n> -   At the first prompt, select 'Bare (first option)'\n> -   At the second prompt, accept the default value (press Enter). Changing this can cause issues running your project.\n> -   At the third prompt, enter a name for the solution folder.\n\nFor more information, read about [ejecting from Expo](https://docs.expo.io/workflow/customizing/).\n\n## Final Build\n\nAfter ejecting from Expo, the process for creating a build is the same as for a standard native application. You can open the project folders in xCode (/ios/projectName.xcodeproj) or Android Studio (/android) and perform builds from the IDE. There are also npm scripts added to your package.json file during ejection that will allow you to perform builds from the command line. Depending on the version of React Native you are using, you may have to [manually bundle your JS code](https://stackoverflow.com/questions/44446523/unable-to-load-script-from-assets-index-android-bundle-on-windows) for Android.\n\n<Divider />\n\n# Additional Information\n\n## RNC CLI vs. Expo CLI\n\nThere are two popular approaches to starting a new React Native project. The first (recommended) is to use the [React Native Community CLI](https://github.com/react-native-community/cli) and the second is to use the [Expo CLI](https://docs.expo.io/workflow/expo-cli/). The Expo CLI is nice for spinning up quick projects and demos, but to use certain libraries/plugins you will need to eject to vanilla React Native. For this reason, we recommend most production applications start with the RNC CLI instead to avoid the complications of ejecting.\n\n> **NOTE:** Brightlayer UI examples are written using the Expo CLI. The primary reason for this is because it provides the ability to share live-running code examples via [Snack](https://snack.expo.io/).\n\n## Code Formatting / Style\n\nBrightlayer UI provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the Brightlayer UI team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/brightlayer-ui/code-standards).\n\n> NOTE: the ESLint package is only available for TypeScript projects.\n\n## Component recommendations\n\nThere are a lot of resources and components available on the market to help speed up your development and improve reusability. React Native also comes with a built-in component library. We recommend the following:\n\n-   Navigation\n    -   [React Navigation](https://reactnavigation.org/) (JS-only implementation)\n    -   [React Native Navigation](https://wix.github.io/react-native-navigation/#/) (native implementation)\n-   Component Libraries\n    -   [React Native Built-in Components](https://reactnative.dev/docs/components-and-apis)\n    -   [React Native Paper](https://callstack.github.io/react-native-paper/)\n    -   [React Native Elements](https://react-native-training.github.io/react-native-elements/)\n\n## License Information\n\n[React Native](https://github.com/facebook/react-native/blob/master/LICENSE) is available under the MIT License.\n"
    },
    "/development/testing": {
        "title": "Testing",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\n\n# Testing Your V Systems Applications\n\n<!-- KEYWORDS: testing test unit e2e tdd bdd integration cypress -->\n\n## V Explorer - Transaction Explorer\n\nExplore transactions and network activity on our [V Systems Explorer](https://explorer.v.systems/).\n\n"
    },
    "/design/intro": { "title": "Introduction" },
    "/design/anatomy": { "title": "Design System Anatomy" },
    "/design/accessibility": { "title": "Accessibility" },
    "/design/websites": { "title": "Websites" },
    "/design/project-identity": { "title": "Project Identity" },
    "/patterns": { "title": "Design Patterns" },
    "/patterns/account-menu": { "title": "Account Menu" },
    "/patterns/appbar": { "title": "App Bars" },
    "/patterns/empty-states": { "title": "Empty States" },
    "/patterns/forms": { "title": "Forms and Validation" },
    "/patterns/internationalization": { "title": "Internationalization" },
    "/patterns/lists": { "title": "Lists & Tables" },
    "/patterns/loading": { "title": "Loading & Waiting" },
    "/patterns/navigation": { "title": "Navigation" },
    "/patterns/overlay": { "title": "Overlays" },
    "/patterns/steppers": { "title": "Steppers" },
    "/patterns/user-auth": { "title": "User Authentication" },
    "/patterns/visualizations": { "title": "Visualizations" },
    "/style": { "title": "Style Guide" },
    "/style/color": { "title": "Color Palette" },
    "/style/iconography": { "title": "Iconography" },
    "/style/illustrations": { "title": "Illustrations" },
    "/style/typography": { "title": "Typography" },
    "/style/themes": { "title": "Themes" },
    "/community": { "title": "Community" },
    "/community/license": {
        "title": "Licensing",
        "text": "<!-- KEYWORDS: license open source bsd -->\n\n# Open Source License\n\nBrightlayer UI is open source and licensed under the [BSD-3-Clause](https://github.com/brightlayer-ui/themes/blob/master/LICENSE) license agreement. The text of this license can be found in any of our resource repositories on GitHub and NPM. You should include this license information in a comment block in any of your projects that make use of Brightlayer UI assets (i.e., themes, colors, icons).\n\n## Why Open Source?\n\nMost modern software applications are not built in a vacuum - typically they make use of a variety of open source libraries. Brightlayer UI applications are no exception. So to make the process of using Brightlayer UI more consistent with other libraries and simplify the delivery mechanism, we have made our resources available in the same way.\n\nPublishing these resources publicly will also allow us to continuously deliver updates and improvements seamlessly to development teams.\n\nTo learn more about adding these resources into your projects, refer to the updated Framework Guides.\nIf you are interested in contributing to Brightlayer UI, please check out our [Innersource](/community/innersourcing) overview.\n\n## Full License Text\n\n```\nBSD 3-Clause License\n\nCopyright (c) 2020 - present, Eaton\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and / or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n"
    },
    "/community/innersourcing": { "title": "Innersourcing" },
    "/community/bugs": {
        "title": "Report Bugs",
        "text": "<!-- KEYWORDS: bugs -->\n\n# Encountering and Reporting Bugs\n\nOne of the primary reasons for using Google's [Material Design](https://material.io/) system is to take advantage of the large community of development resources attached to the project. This improves the response time for issues and cuts down on the number of bugs in the platforms. But nobody is perfect - if you run into an issue, please let us know.\n\n## If You Encounter a Bug w/ Brightlayer UI\n\nIf you run into a bug with:\n\n-   Brightlayer UI themes, components, or other NPM packages\n-   Brightlayer UI code samples or\n-   the Brightlayer UI documentation on this site\n\nyou can help us make the experience better for yourself and others by reporting a bug. Simply contact us with the following information:\n\n-   Summary: a brief, but clear description of the issue.\n-   Description: more detailed information about the issue including steps to reproduce.\n-   Environment: information about your machine (Operating System, Browser Version).\n\nYou can also report issues on the appropriate page on [GitHub](https://github.com/brightlayer-ui).\n\n## If You Encounter a Bug in Your Framework\n\nThe JavaScript libraries and their associated Material Design libraries are part of the open source community. If you find an issue with either of these, you can submit your tickets directly to those projects using the links below (or better yet, fork the repository and contribute!):\n\n### Angular\n\n-   [Angular](https://github.com/angular/angular/issues)\n-   [Angular Material](https://github.com/angular/material2/issues)\n\n### React\n\n-   [React](https://github.com/facebook/react/issues)\n-   [Material-UI](https://github.com/mui-org/material-ui/issues)\n\n### Ionic / Cordova\n\n-   [Ionic](https://github.com/ionic-team/ionic/issues)\n-   [Cordova](https://github.com/apache/cordova/issues)\n-   [Cordova CLI](https://github.com/apache/cordova-cli/issues)\n\n### React Native\n\n-   [React Native](https://github.com/facebook/react-native/issues)\n"
    },
    "/community/features": { "title": "Request Features" },
    "/community/faq": {
        "title": "FAQ",
        "text": "import { Divider, FAQExpander } from '../../app/components';\n\n<!-- KEYWORDS: faq question answers -->\n\n# Frequently Asked Questions\n\nWe strive to provide as much information as possible about Brightlayer UI in our documentation as possible. However, we can't always cover everything. Below are some common questions that people have asked about the platform. Please check to see if your question has been answered below before contacting us directly.\n\n## General\n\n<div>\n<FAQExpander question={`Can you provide our team with an overview of Brightlayer UI?`}>\n\nYes. If you would like to meet with our team to go over the basics (whats and whys) of Brightlayer UI and go through everything that we have to offer, please get in touch with us to set up a time.\n\n</FAQExpander>\n\n<FAQExpander question={`What is your release schedule?`}>\n\nBrightlayer UI operates on a continuous delivery model — we release new resources as soon as they are available. Our work is planned on a quarterly basis and towards the end of each quarter we hold a release announcement event where we go over all of the updates to the platform that were made during that quarter and answer questions from the community. If you would like to attend these announcements, please contact us and we will add you to our mailing list. You can track our progress for the current quarter on our [Roadmap](/roadmap) page, which is updated every two weeks.\n\n</FAQExpander>\n</div>\n\n## Developers\n\n<div>\n<FAQExpander question={`How do I start a project?`}>\n\nIf you are starting a new project, we highly recommend using the [Brightlayer UI CLI](/development/cli) to start your project. This will automatically integrate all of the necessary Brightlayer UI resources as well as give you several templates to choose from for starting your project. If you need to integrate Brightlayer UI into an existing project, we have comprehensive Getting Started guides for [Web](/development/frameworks-web/intro) and [Mobile](/development/frameworks-mobile/intro) projects that walk you through the steps necessary to add Brightlayer UI to your project, including adding themes, components libraries, etc.\n\n</FAQExpander>\n\n<FAQExpander question={`Do you support VueJS, WPF, Flutter, or other frameworks?`}>\n\nAt this time, Brightlayer UI only supports Angular or React for web projects and Ionic (with Angular) or React Native for mobile applications. While we would love to be able to support all of the other great frameworks that are out there, the Brightlayer UI team does not currently have the resources to effectively support them all. One of the primary goals of Brightlayer UI is to maximize re-usability and code-sharing between projects / teams — supporting every possible framework goes against this principle. We've tried to support enough frameworks to give teams flexibility in their choice while also ensuring that we can continue to provide meaningful content on an ongoing basis. \n\n</FAQExpander>\n\n<FAQExpander question={`Can the Brightlayer UI team build my application?`}>\n\nThe Brightlayer UI team is not currently staffed for doing project development for product teams. We are available to support your development team with integrating and using the Brightlayer UI resources in your project, but you will need to build your own development team to create your application.\n\n</FAQExpander>\n\n<FAQExpander question={`Do you have icons for _____?`}>\n\nWith Brightlayer UI, you have access to all of the Material Design icons as well as additional icons that have been designed specifically for Brightlayer UI applications. These can all be browsed on our [Iconography](/style/iconography) page. Clicking on an icon will show information about the icon including usage instructions in our supported frameworks as well as buttons to download icons individually. If you need an icon that is not currently available, contact us and we will work with you on a solution.\n\n</FAQExpander>\n\n<FAQExpander question={`How do I build my own theme?`}>\n\nMost applications should stick to using the default Brightlayer UI themes. However, in some cases you may need to develop your own theme, such as for products that are sold under a different brand or are white-labeled for other companies. In this case, you should refer to the theming instructions for your selected framework ([Angular](https://v7.material.angular.io/guide/theming), [React](https://mui.com/customization/theming/), [React Native](https://callstack.github.io/react-native-paper/theming.html)). You may wish to start with the default Brightlayer UI themes and extend only the pieces that need to change for your project.\n\n</FAQExpander>\n\n<FAQExpander question={`Can I use other charting solutions (e.g., D3) with Brightlayer UI?`}>\n\nCurrently, Brightlayer UI recommends using [Highcharts](http://www.highcharts.com) for your charting needs. If you prefer an open-source charting alternative, Brightlayer UI also offers resources for working with [ChartJS](https://www.chartjs.org/). You can read more about this on our [Visualizations](/patterns/visualizations) page. You may use other charting solutions in your application if there is a genuine business need, but keep in mind that this may compromise the consistency and reusability of your solution when compared to other projects.\n\n</FAQExpander>\n\n<FAQExpander question={`What if I need to build a desktop app?`}>\n\nIf you need to build a standalone desktop application, we recommend using a tool like [Electron](https://www.electronjs.org/). This will allow you to build the application using one of Brightlayer UI's supported web technologies while still being able to package the application for installation onto a desktop.\n\n</FAQExpander>\n\n<FAQExpander question={`How can I contribute?`}>\n\nIf you are interested in contributing to Brightlayer UI, that's awesome! We welcome pull requests for features and bug fixes. We're also more than happy to have you report bugs and reach out to us with comments, suggestions, or other ideas. Please read our [Innersourcing](/community/innersourcing) guide for more details.\n\n</FAQExpander>\n</div>\n\n\n## Designers\n\n<div>\n<FAQExpander question={`Do you have any design assets for Brightlayer UI?`}>\n\nYes! We have standardized on Figma as our preferred tool for designing Brightlayer UI applications. We have a [Component Sticker Sheet](https://www.figma.com/community/file/1024360297793425107) as well as a [Design Pattern Sticker Sheet](https://www.figma.com/community/file/1023327014725714313) that give you access to a wide array of design elements that you can use to kick start your projects. \n\n</FAQExpander>\n\n<FAQExpander question={`Do you have assets for Adobe Illustrator or Sketch?`}>\n\nAt this time, we have standardized on Figma as our design tool of choice for Brightlayer UI applications and will not be maintaining resources for other tools. This is to ensure that teams are able to be working from the same set of resources to help maintain consistency and re-usability across products. If you would like to learn more about Figma or getting access for you team, please get in touch with us.\n\n</FAQExpander>\n\n<FAQExpander question={`Do you have design patterns for _____?`}>\n\nWe will be continuously updating the [Design Patterns](/patterns) section with new patterns and code samples as they are available. We will prioritize patterns and examples based on interest expressed from development teams. If there is something you want to see, please contact us.\n\nIf you have built something that you would like to share, check out our information on [innersourcing](/community/innersourcing) and [Contact Us](/community/contactus) with a demo.\n\n</FAQExpander>\n\n<FAQExpander question={`What do other Brightlayer UI projects look like?`}>\n\nIf you are interested in seeing some examples of past and present projects that have been designed using Brightlayer UI, please get in touch with us. We would be more than happy to point you to some reference materials from other projects.\n\n</FAQExpander>\n\n<FAQExpander question={`How much creative freedom do I have as a designer?`}>\n\nBrightlayer UI is not meant to limit your creativity or make you feel like you are designing in a box. We want Brightlayer UI products to feel like they are part of the same family, but we do not want them to all feel like the same application. There are some aspects of applications that need to be the same across products to drive this consistency, but other areas are fair game for you to develop your own style. You can learn more by reading our page on [Product Identity](/design/project-identity).\n\n</FAQExpander>\n\n<FAQExpander question={`What if my development team says _____ is not possible?`}>\n\nIf you are designing your project using the Brightlayer UI assets we provide, these should be achievable without much issue on the development side. If you have specific concerns, please feel free to contact our development team and we can help your developers find a solution that will work.\n\n</FAQExpander>\n\n<FAQExpander question={`How can I contribute?`} style={{marginBottom: 64}}>\n\nIf you are interested in contributing to Brightlayer UI, that's awesome! We would love to see what you have designed. If you have components or patterns that you think would be valuable to share with the rest of the Brightlayer UI community, please get in touch with us for a discussion. You can also find more information on our [Innersourcing](/community/innersourcing#how-we-innersource-new-features) page.\n\n</FAQExpander>\n</div>\n\nDon't see what you're looking for? [Contact Us](/community/contactus)."
    },
    "/resources/developer": { "title": "Developer Resources" },
    "/resources/designer": { "title": "Designer Resources" },
    "/roadmap": { "title": "Roadmap" },
    "/release-notes": { "title": "Release Notes" },
    "/attributions": { "title": "Attributions" }
}
